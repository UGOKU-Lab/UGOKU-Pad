plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {
    namespace = "com.ugoku_lab.ugoku_console"

    // Explicitly pin compile / target SDK to satisfy Play target API level requirement.
    // NOTE: As of 2025/09, API 34 is stable; switch to 35 (Android 15) once Flutter stable supports it fully.
    compileSdk = 34
    ndkVersion = "27.0.12077973"

    defaultConfig {
        applicationId = "com.ugoku_lab.ugoku_console"
        minSdk = flutter.minSdkVersion // defined by Flutter (currently from generated values)
        targetSdk = 34 // update to 35 (Android 15) after validation
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    // Move to Java 17 per modern AGP & Play guidance (JDK 17 LTS). Ensure your build environment uses JDK 17.
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    // --- Signing configuration ---
    // Moved from hardcoded absolute macOS path to key.properties based loading.
    // 1. Create android/key.properties (DO NOT COMMIT!) with:
    //    storeFile=..\\keystore\\release_key.jks
    //    storePassword=YOUR_PASSWORD
    //    keyAlias=ugokupad
    //    keyPassword=YOUR_PASSWORD
    // 2. Place the JKS file at android/keystore/release_key.jks (or adjust path).
    // Falls back to debug signing if key.properties or keystore is missing.
    def keystorePropsFile = rootProject.file("key.properties")
    def keystoreProps = new Properties()
    if (keystorePropsFile.exists()) {
        keystoreProps.load(new FileInputStream(keystorePropsFile))
    }

    signingConfigs {
        release {
            if (keystorePropsFile.exists() && keystoreProps['storeFile']) {
                def ksPath = keystoreProps['storeFile']
                File ksFile = file(ksPath) // resolve relative to app module
                // If not found relative to module, try resolving relative to root (android/) directory
                if (!ksFile.exists()) {
                    File alt = rootProject.file(ksPath)
                    if (alt.exists()) {
                        ksFile = alt
                    }
                }
                if (!ksFile.exists()) {
                    throw new RuntimeException("Configured storeFile '${ksPath}' not found. Looked for: ${ksFile.absolutePath}")
                }
                storeFile ksFile
                storePassword keystoreProps['storePassword']
                keyAlias keystoreProps['keyAlias']
                keyPassword keystoreProps['keyPassword']
            } else {
                // Fallback: try typical debug keystore locations. We avoid failing build so developer can still run release locally.
                def debugKsCandidates = [
                        file("debug.keystore"),
                        file(System.getProperty("user.home") + "/.android/debug.keystore")
                ]
                def found = debugKsCandidates.find { it.exists() }
                if (!found) {
                    println("[INFO] Generating temporary debug keystore for fallback release signing (not for Play upload).")
                    def proc = ["keytool", "-genkeypair", "-v", "-storetype", "JKS", "-keystore", "debug.keystore",
                                "-alias", "androiddebugkey", "-keyalg", "RSA", "-keysize", "2048", "-validity", "10000",
                                "-storepass", "android", "-keypass", "android",
                                "-dname", "CN=Android Debug,O=Android,C=US"].execute()
                    proc.waitFor()
                    found = file("debug.keystore")
                }
                println("[WARN] release keystore not configured - using debug/temporary signing. Create key.properties for a real release.")
                storeFile found
                storePassword "android"
                keyAlias "androiddebugkey"
                keyPassword "android"
            }
        }
    }

    buildTypes {
        release {
            // Use the release keystore. Remove the debug signingConfig override.
            signingConfig = signingConfigs.release
            // Enable code shrinking / resource shrinking if desired (uncomment after testing):
            // minifyEnabled true
            // shrinkResources true
            // proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source = "../.."
}
